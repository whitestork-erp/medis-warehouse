[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"container-fluid mt-4\">\n  <div class=\"row\">\n    <div class=\"col-md-6 offset-md-3\">\n      <div class=\"card\">\n        <div class=\"card-body text-center\">\n          <h4>Start Picking</h4>\n\n          <!--  barcode input  -->\n          <input type=\"text\"\n                 id=\"scanBarcode\"\n                 class=\"form-control form-control-lg\"\n                 placeholder=\"Scan barcode…\"\n                 autocomplete=\"off\"\n                 autofocus>\n\n          <!--  feedback  -->\n          <div id=\"scanFeedback\" class=\"mt-3\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n",
  "modified": "2025-08-31 09:52:10.434129",
  "name": "Scan Item",
  "private": 0,
  "roles": [],
  "script": "\nconst fb = root_element.getElementById('scanFeedback');\n\nroot_element.querySelector('#scanBarcode').addEventListener('keydown', function(event) {\n  event.stopPropagation();\n  fb.innerHTML = ''\n  if (event.key === 'Enter') {\n    event.preventDefault();\n    updateWorkflowState(event);\n  }\n});\n\n// root_element.querySelector('#scanBarcode').addEventListener('keydown', function(event) {\n//   updateWorkflowState(event);\n// });\n\nfunction updateWorkflowState(event) {\nvar barcode = root_element.querySelector('#scanBarcode').value.trim();\nconst box = root_element.getElementById('scanBarcode');\n\nif (!barcode) return;\nfrappe.call({\n        method: 'medis.api.scan_invoice.transition_to_picking',\n        args: { invoice_barcode: barcode },\n        callback: r => {\n          box.value = '';\n          fb.innerHTML = `<span class=\"${r.message.ok ? 'text-success' : 'text-danger'}\">${r.message.msg}</span>`;\n          r.message.ok ? frappe.utils.play_sound(\"submit\"):frappe.utils.play_sound(\"error\");\n        }\n      });\n      \n}",
  "style": "#scanFeedback { font-weight:bold; }"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<!DOCTYPE html>\n<div class=\"container-fluid mt-4\" id=\"controlling-container\">\n  <!-- 1. Invoice scanner  -->\n  <div class=\"row\">\n    <div class=\"col-md-6 offset-md-3\">\n      <div class=\"card\">\n        <div class=\"card-body text-center\">\n          <h4>Start Controlling</h4>\n\n          <!--<div class=\"col-md-6 offset-md-3\">-->\n          <input\n            type=\"text\"\n            id=\"invoiceBarcode\"\n            class=\"form-control form-control-lg\"\n            placeholder=\"Scan barcode…\"\n            autocomplete=\"off\"\n            autofocus\n          />\n          <div id=\"invoiceFeedback\" class=\"mt-3\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Invoice card (read-only) + Delete -->\n<div class=\"row mt-3\">\n  <div class=\"col-md-8 offset-md-2\">\n    <div id=\"invoiceCard\" class=\"card d-none\">\n      <div class=\"card-body\">\n        <div class=\"d-flex justify-content-between align-items-center\">\n          <h5 class=\"card-title mb-0\">\n            Invoice <span id=\"invName\"></span>\n          </h5>\n          <button id=\"btnCancelControl\" class=\"btn btn-primary\">\n            Cancel Control\n          </button>\n        </div>\n\n        <p class=\"mb-1 mt-2\">\n          <strong>Customer:</strong> <span id=\"invCustomer\"></span>\n        </p>\n        <p class=\"mb-1\">\n          <strong>Status:</strong> <span id=\"invStatus\"></span>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- 2. Item scanner (only visible after invoice) -->\n<div class=\"row mt-4 d-none\" id=\"itemSection\">\n  <div class=\"col-md-6 offset-md-3\">\n    <input\n      type=\"text\"\n      id=\"itemBarcode\"\n      class=\"form-control form-control-lg\"\n      placeholder=\"Scan item barcode …\"\n      autocomplete=\"off\"\n      disabled\n    />\n    <div id=\"itemFeedback\" class=\"mt-2\"></div>\n  </div>\n</div>\n\n<!-- 3. Scanned-items table -->\n<div class=\"row mt-4 d-none\" id=\"tableSection\">\n  <div class=\"col-md-8 offset-md-2\">\n    <table class=\"table table-bordered\" id=\"scanTable\">\n      <thead>\n        <tr>\n          <th>Item Code</th>\n          <th>Item Name</th>\n          <th>Required&nbsp;Qty</th>\n          <th>Scanned&nbsp;Qty</th>\n          <th style=\"width:90px\">Action</th>\n        </tr>\n      </thead>\n      <tbody></tbody>\n    </table>\n  </div>\n</div>\n\n<!-- 4. Compare button -->\n<div class=\"row mt-3 d-none\" id=\"compareSection\">\n  <div class=\"col-md-8 offset-md-2 text-center\">\n    <button id=\"btnCompare\" class=\"btn btn-primary\">\n      Compare with Invoice\n    </button>\n    <div id=\"compareResult\" class=\"mt-3\"></div>\n    <!-- 4-bis  Comparison tables -->\n    <div class=\"row mt-4 d-none\" id=\"comparisonSection\">\n      <div class=\"col-md-10 offset-md-1\">\n        <!--  Missing items table  -->\n        <div class=\"row mt-4 d-none\" id=\"missingSection\">\n          <div class=\"col-md-8 offset-md-2\">\n            <h5>Comparison result</h5>\n            <h6 class=\"text-danger\">Missing items</h6>\n            <table class=\"table table-bordered\" id=\"missingTable\">\n              <thead>\n                <tr>\n                  <th>Item Code</th>\n                  <th>Item Name</th>\n                  <th>Required&nbsp;Qty</th>\n                  <th>Scanned&nbsp;Qty</th>\n                </tr>\n              </thead>\n              <tbody></tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <button id=\"btnClearScanned\" class=\"btn btn-secondary btn-sm\">\n      Clear scanned list\n    </button>\n  </div>\n</div>\n<!--</div>-->\n\n<!-- 5. Pack button -->\n<div class=\"row mt-3 d-none\" id=\"packSection\">\n  <div class=\"col-md-8 offset-md-2 text-center\">\n    <button id=\"btnPack\" class=\"btn btn-success\">Pack</button>\n  </div>\n</div>\n",
  "modified": "2025-09-01 12:45:55.159183",
  "name": "Controller Scanning Screen",
  "private": 0,
  "roles": [],
  "script": "let keyGuard; // will hold the listener reference\nlet scannedRowNameMap = new Map();\n// --- elements ----\n\nlet invoiceDoc = null;\nlet scannedMap = new Map(); // {item_code: qty}\nconst rows = [];\nconst invBox = root_element.getElementById(\"invoiceBarcode\");\nconst invFb = root_element.getElementById(\"invoiceFeedback\");\nconst itemBox = root_element.getElementById(\"itemBarcode\");\nconst itemFb = root_element.getElementById(\"itemFeedback\");\nconst tbody = root_element.querySelector(\"#scanTable tbody\");\nconst missingSection = root_element.getElementById(\"#missingTable tbody\");\nconst compareResult = root_element.getElementById(\"compareResult\");\nconst packSection = root_element.getElementById(\"packSection\");\nconst packBtn = root_element.getElementById(\"btnPack\");\nconst controllingBox = root_element.getElementById(\"controlling-container\");\nconst btnClearScanned = root_element.getElementById(\"btnClearScanned\");\n\n(function () {\n  // prevent global search shortcuts\n  [invBox, itemBox].forEach((box) =>\n    box.addEventListener(\"keydown\", (e) => {\n      e.stopPropagation();\n      if (e.key === \"/\" || (e.ctrlKey && e.key.toLowerCase() === \"k\")) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    })\n  );\n\n  // ---------- 1. invoice scan ----------\n  invBox.addEventListener(\"keydown\", (event) => {\n    if (event.key !== \"Enter\") return;\n\n    event.preventDefault();\n    invFb.innerHTML = \"\";\n    fetchInvoice(invBox.value.trim());\n  });\n\n  function fetchInvoice(invoice) {\n    if (!invoice) return;\n    frappe.call({\n      method: \"medis.api.get_invoice_by_barcode.get_invoice_by_barcode\",\n      args: { invoice },\n      callback: (r) => {\n        if (r.message.ok) {\n          controllingBox.hidden = true;\n          invoiceDoc = r.message.doc;\n          renderInvoice(r.message.doc);\n          enableItemSection();\n          toggleClearButton();\n        } else {\n          invFb.innerHTML = `<span class=\"${\n            r.message.ok ? \"text-success\" : \"text-danger\"\n          }\">${r.message.msg}</span>`;\n          frappe.utils.play_sound(\"error\");\n        }\n        invBox.value = \"\";\n      },\n    });\n  }\n\n  function renderInvoice(doc) {\n    root_element.getElementById(\"invName\").textContent = doc.name;\n    root_element.getElementById(\"invCustomer\").textContent = doc.customer;\n    root_element.getElementById(\"invStatus\").textContent = doc.workflow_state;\n    root_element.getElementById(\"invoiceCard\").classList.remove(\"d-none\");\n    invBox.hidden = true;\n  }\n\n  function enableItemSection() {\n    root_element.getElementById(\"itemSection\").classList.remove(\"d-none\");\n    root_element.getElementById(\"tableSection\").classList.remove(\"d-none\");\n    root_element.getElementById(\"compareSection\").classList.remove(\"d-none\");\n    itemBox.disabled = false;\n    itemBox.focus();\n    blockGlobalKeys();\n    tbody.addEventListener(\"keydown\", (e) => {\n      if (\n        e.target.classList.contains(\"qty-input\") &&\n        (e.key === \"Enter\" || e.key === \"Tab\")\n      ) {\n        e.preventDefault();\n        itemBox.focus();\n      }\n    });\n\n    tbody.addEventListener(\"change\", (e) => {\n      if (e.target.classList.contains(\"qty-input\")) {\n        itemBox.focus();\n      }\n    });\n  }\n\n  root_element.addEventListener(\"click\", (e) => {\n    if (!e.target.classList.contains(\"btn-remove\")) return;\n    const code = e.target.dataset.code;\n    scannedMap.delete(code);\n    e.target.closest(\"tr\").remove();\n    toggleClearButton();\n  });\n\n  // Clear entire scanned list\n  root_element\n    .getElementById(\"btnClearScanned\")\n    .addEventListener(\"click\", () => {\n      const d = new frappe.ui.Dialog({\n        title: \"Clear Scanned List\",\n        fields: [\n          {\n            label: \"Are you sure you want to clear scanned list?\",\n            fieldtype: \"HTML\",\n            options:\n              \"<p>This will clear the invoice and all scanned items.</p>\",\n          },\n        ],\n        primary_action_label: \"Yes, Clear\",\n        primary_action: () => {\n          // ---- existing reset code ----\n          scannedMap.clear();\n          \n          tbody.innerHTML = \"\";\n          root_element\n            .getElementById(\"comparisonSection\")\n            .classList.add(\"d-none\");\n          togglePackButton(false);\n          itemBox.focus();\n          d.hide();\n          toggleClearButton();\n        },\n        \n        secondary_action_label: \"No\",\n        secondary_action: () => d.hide(),\n      });\n      d.show();\n    });\n\n  // ---------- 2. item scan ----------\n  itemBox.addEventListener(\"keydown\", (e) => {\n    if (e.key !== \"Enter\") return;\n    e.preventDefault();\n    lookupItemByBarcode(itemBox.value.trim());\n    itemFb.innerHTML = \"\";\n  });\n\n  function lookupItemByBarcode(barcode) {\n    if (!barcode) return;\n    frappe.call({\n      method: \"medis.api.get_item_by_barcode.get_item_by_barcode\",\n      args: { barcode },\n      callback: (r) => {\n        if (r.message.ok) {\n          addOrUpdateRow(r.message.item_code, r.message.item_name);\n        } else {\n          itemFb.innerHTML = `<span class=\"text-danger\">${r.message.msg}</span>`;\n          frappe.utils.play_sound(\"error\");\n        }\n        itemBox.value = \"\";\n      },\n    });\n  }\n\n  function addOrUpdateRow(code, name) {\n    scannedRowNameMap.set(code, name);\n    const qty = scannedMap.get(code) || 0;\n    const newQty = qty || 1;\n    scannedMap.set(code, qty);\n\n    let row = tbody.querySelector(`tr[data-code=\"${code}\"]`);\n\n    if (row) {\n      row.querySelector(\".qty-input\").value = qty;\n    } else {\n      row = document.createElement(\"tr\");\n      row.dataset.code = code;\n      row.innerHTML = `\n        <td>${code}</td>\n        <td>${name}</td>\n        <td> </td>\n        <td>\n          <input type=\"number\" min=\"1\" value=\"\" class=\"form-control qty-input\"\n                style=\"width:80px;\" autofocus>\n        </td>\n        <td>\n        <button class=\"btn btn-sm btn-outline-secondary btn-remove\"\n                data-code=\"${code}\" title=\"Remove\">\n          Clear\n        </button>\n      </td>`;\n      tbody.appendChild(row);\n      toggleClearButton();\n\n    }\n\n    row.querySelector(\".qty-input\").focus();\n    row.querySelector(\".qty-input\").addEventListener(\"change\", (e) => {\n      const newQty = parseInt(e.target.value || 0);\n      scannedMap.set(code, newQty);\n    });\n    //   const input = row.querySelector(\".qty-input\");\n    // input.addEventListener(\"input\", () => {\n    //   let v = parseInt(input.value) || 1;\n    //   if (v < 1) v = 1;\n    //   input.value = v;\n    //   scannedMap.set(code, v);\n    // });\n  }\n\n  // ---------- 3. delete invoice ----------\n  root_element\n    .getElementById(\"btnCancelControl\")\n    .addEventListener(\"click\", () => {\n      const d = new frappe.ui.Dialog({\n        title: \"Cancel Control\",\n        fields: [\n          {\n            label: \"Are you sure you want to cancel the current control?\",\n            fieldtype: \"HTML\",\n            options:\n              \"<p>This will clear the invoice and all scanned items.</p>\",\n          },\n        ],\n        primary_action_label: \"Yes, Cancel\",\n        primary_action: () => {\n          // ---- existing reset code ----\n          frappe.call({\n            method: \"medis.api.cancel_control.cancel_control\",\n            args: {\n              invoice: invoiceDoc.name,\n            },\n            callback: (r) => {\n              console.log(\"------cancel control response----\", r);\n              if (r.message.ok) {\n                // frappe.show_alert({\n                //   message: \"Invoice Controlling Canceled successfully\",\n                //   indicator: \"green\",\n                // });\n                d.hide();\n                frappe.utils.play_sound(\"submit\");\n              } else {\n                frappe.msgprint(\n                  r.message.error || \"Error while Canceling Control\"\n                );\n              }\n            },\n          });\n          invoiceDoc = null;\n          scannedMap.clear();\n          // rows = [];\n          // missingSection.innerHTML = \"\";\n          tbody.innerHTML = \"\";\n          compareResult.innerHTML = \"\";\n\n          root_element.getElementById(\"invoiceCard\").classList.add(\"d-none\");\n          root_element.getElementById(\"itemSection\").classList.add(\"d-none\");\n          root_element.getElementById(\"tableSection\").classList.add(\"d-none\");\n          root_element.getElementById(\"compareSection\").classList.add(\"d-none\");\n\n          invBox.value = \"\";\n          invBox.hidden = false;\n          invBox.focus();\n          controllingBox.hidden = false;\n\n          // -----------------------------\n\n          d.hide();\n        },\n        secondary_action_label: \"No\",\n        secondary_action: () => d.hide(),\n      });\n      d.show();\n      unblockGlobalKeys();\n    });\n\n  function clearPage() {\n    invoiceDoc = null;\n    scannedMap.clear();\n    tbody.innerHTML = \"\";\n    compareResult.innerHTML = \"\";\n    root_element.getElementById(\"invoiceCard\").classList.add(\"d-none\");\n    root_element.getElementById(\"itemSection\").classList.add(\"d-none\");\n    root_element.getElementById(\"tableSection\").classList.add(\"d-none\");\n    root_element.getElementById(\"compareSection\").classList.add(\"d-none\");\n\n    invBox.value = \"\";\n    invBox.hidden = false;\n    invBox.focus();\n    controllingBox.hidden = false;\n  }\n\n  // ---------- 4. compare ----------\n  root_element\n    .getElementById(\"btnCompare\")\n    .addEventListener(\"click\", compareWithInvoice);\n\n  function compareWithInvoice() {\n    if (!invoiceDoc) return;\n    syncQtyFromTable();\n\n    // Build required map\n    const requiredMap = new Map();\n    invoiceDoc.items.forEach((it) =>\n      requiredMap.set(it.item_code, { qty: it.qty, name: it.item_name })\n    );\n\n    // ------------------------------------------------------------------\n    // 1) Missing items table\n    // ------------------------------------------------------------------\n    const mSection = root_element.getElementById(\"missingSection\");\n    const mTbody = root_element.querySelector(\"#missingTable tbody\");\n\n    mTbody.innerHTML = \"\";\n    requiredMap.forEach((v, code) => {\n      if (!scannedMap.has(code)) {\n        const tr = document.createElement(\"tr\");\n        tr.innerHTML = `\n        <td>${code}</td>\n        <td>${v.name}</td>\n        <td>${v.qty}</td>\n        <td>0</td>`;\n        mTbody.appendChild(tr);\n      }\n    });\n    mSection.classList.toggle(\"d-none\", mTbody.rows.length === 0);\n\n    // ------------------------------------------------------------------\n    // 2) Scanned items table  (extra -> mismatched -> ok)\n    // ------------------------------------------------------------------\n    \n    scannedMap.forEach((scannedQty, code) => {\n      const req = requiredMap.get(code);\n      const row = {\n        code,\n        name: req ? req.name : scannedRowNameMap.get(code) || \"\", // fallback if needed\n        required: req ? req.qty : 0,\n        scanned: scannedQty,\n        type: !req ? \"extra\" : scannedQty !== req.qty ? \"mismatch\" : \"ok\",\n      };\n      rows.push(row);\n    });\n\n    // sort: extra first, then mismatch, then ok\n    rows.sort((a, b) => {\n      const weight = { extra: 0, mismatch: 1, ok: 2 };\n      return weight[a.type] - weight[b.type];\n    });\n\n    const sTbody = root_element.querySelector(\"#scanTable tbody\");\n    sTbody.innerHTML = \"\";\n    rows.forEach((r) => {\n      const tr = document.createElement(\"tr\");\n      tr.classList.add(`row-${r.type}`); // colour class\n      tr.innerHTML = `\n      <td>${r.code}</td>\n      <td>${r.name}</td>\n      <td>${r.required}</td>\n      <td>\n        <input type=\"number\" min=\"0\" value=\"${r.scanned}\"\n               class=\"form-control form-control-sm qty-input\" style=\"width:80px\">\n      </td>\n      <td>\n        <button class=\"btn btn-sm btn-outline-secondary btn-remove\"\n                data-code=\"${r.code}\" title=\"Remove\">Clear</button>\n      </td>`;\n      sTbody.appendChild(tr);\n    });\n\n    // ------------------------------------------------------------------\n    // 3) Show section & toggle Pack button\n    // ------------------------------------------------------------------\n    root_element.getElementById(\"comparisonSection\").classList.remove(\"d-none\");\n    root_element\n      .getElementById(\"comparisonSection\")\n      .scrollIntoView({ behavior: \"smooth\" });\n\n    const missingCount = mTbody.rows.length;\n    const mismatchCount = sTbody.querySelectorAll(\n      \"tr.row-mismatch, tr.row-extra\"\n    ).length;\n    togglePackButton(missingCount === 0 && mismatchCount === 0);\n  }\n\n  packBtn.addEventListener(\"click\", () => {\n    const d = new frappe.ui.Dialog({\n      title: \"Confirm Packing\",\n      fields: [\n        {\n          label: \"Number of Packages\",\n          fieldname: \"packages\",\n          fieldtype: \"Int\",\n          reqd: 1,\n          default: 1,\n        },\n      ],\n      primary_action_label: \"Print & Save\",\n      primary_action: (values) => {\n        frappe.call({\n          method: \"medis.api.pack_invoice.pack_invoice\",\n          args: {\n            invoice: invoiceDoc.name,\n            packages: values.packages,\n            items: Object.fromEntries(scannedMap), // {item_code: qty}\n          },\n          callback: (r) => {\n            if (r.message.success) {\n              frappe.show_alert({\n                message: \"Invoice packed successfully\",\n                indicator: \"green\",\n              });\n              d.hide();\n              // optionally reset the whole screen\n              frappe.utils.play_sound(\"submit\");\n              togglePackButton(false);\n              // root_element.getElementById(\"btnDeleteInvoice\").click();\n              clearPage();\n            } else {\n              frappe.msgprint(r.message.error || \"Error while packing\");\n            }\n          },\n        });\n      },\n    });\n    d.show();\n  });\n\n  function togglePackButton(ok) {\n    if (ok) packSection.classList.remove(\"d-none\");\n    else packSection.classList.add(\"d-none\");\n  }\n  function syncQtyFromTable() {\n    // update scannedMap with whatever the user has typed\n    tbody.querySelectorAll(\"tr\").forEach((tr) => {\n      const code = tr.dataset.code;\n      const val = parseInt(tr.querySelector(\".qty-input\").value) || 1;\n      scannedMap.set(code, val);\n    });\n  }\n})();\n\nfunction blockGlobalKeys() {\n  keyGuard = (e) => {\n    // numbers on the numpad and main keyboard\n    if (e.code.startsWith(\"Digit\") || e.code.startsWith(\"Numpad\")) {\n      e.stopImmediatePropagation();\n    }\n  };\n  document.addEventListener(\"keydown\", keyGuard, true); // use-capture\n}\n\nfunction unblockGlobalKeys() {\n  if (keyGuard) {\n    document.removeEventListener(\"keydown\", keyGuard, true);\n    keyGuard = null;\n  }\n}\n\nfunction toggleClearButton() {\n  const hasRows = tbody.rows.length > 0;\n  btnClearScanned.classList.toggle(\"d-none\", !hasRows);\n}",
  "style": ""
 }
]