[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"container-fluid mt-4\">\n  <div class=\"row\">\n    <div class=\"col-md-6 offset-md-3\">\n      <div class=\"card\">\n        <div class=\"card-body text-center\">\n          <h4>Start Picking</h4>\n\n          <!--  barcode input  -->\n          <input type=\"text\"\n                 id=\"scanBarcode\"\n                 class=\"form-control form-control-lg\"\n                 placeholder=\"Scan barcode…\"\n                 autocomplete=\"off\"\n                 autofocus>\n\n          <!--  feedback  -->\n          <div id=\"scanFeedback\" class=\"mt-3\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n",
  "modified": "2025-09-08 11:21:03.551147",
  "name": "Picker Scanning Screen",
  "private": 0,
  "roles": [],
  "script": "\nconst fb = root_element.getElementById('scanFeedback');\n\nroot_element.querySelector('#scanBarcode').addEventListener('keydown', function(event) {\n  event.stopPropagation();\n  fb.innerHTML = ''\n  if (event.key === 'Enter') {\n    event.preventDefault();\n    updateWorkflowState(event);\n  }\n});\nfunction updateWorkflowState(event) {\nvar barcode = root_element.querySelector('#scanBarcode').value.trim();\nconst box = root_element.getElementById('scanBarcode');\n\nif (!barcode) return;\nfrappe.call({\n        method: 'medis.api.picker_utils.transition_to_picking',\n        args: { invoice_barcode: barcode },\n        callback: r => {\n          box.value = '';\n          fb.innerHTML = `<span class=\"${r.message.ok ? 'text-success' : 'text-danger'}\">${r.message.msg}</span>`;\n          r.message.ok ? frappe.utils.play_sound(\"submit\"):frappe.utils.play_sound(\"error\");\n        }\n      });\n      \n}",
  "style": "#scanFeedback { font-weight:bold; }"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"container-fluid mt-4\" id=\"controlling-container\">\r\n  <!-- 1. Invoice scanner  -->\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6 offset-md-3\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body text-center\">\r\n          <h4>Start Controlling</h4>\r\n\r\n          <!--<div class=\"col-md-6 offset-md-3\">-->\r\n          <input\r\n            type=\"text\"\r\n            id=\"invoiceBarcode\"\r\n            class=\"form-control form-control-lg\"\r\n            placeholder=\"Scan barcode…\"\r\n            autocomplete=\"off\"\r\n            autofocus\r\n          />\r\n          <div id=\"invoiceFeedback\" class=\"mt-3\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Invoice card (read-only) + Delete -->\r\n<div class=\"row mt-3\">\r\n  <div class=\"col-md-8 offset-md-2\">\r\n    <div id=\"invoiceCard\" class=\"card d-none\">\r\n      <div class=\"card-body\">\r\n        <div class=\"d-flex justify-content-between align-items-center\">\r\n          <h5 class=\"card-title mb-0\">\r\n            Invoice <span id=\"invName\"></span>\r\n          </h5>\r\n          <button id=\"btnCancelControl\" class=\"btn btn-primary\">\r\n            Cancel Control\r\n          </button>\r\n        </div>\r\n\r\n        <p class=\"mb-1 mt-2\">\r\n          <strong>Customer:</strong> <span id=\"invCustomer\"></span>\r\n        </p>\r\n        <p class=\"mb-1\">\r\n          <strong>Status:</strong> <span id=\"invStatus\"></span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- 2. Item scanner (only visible after invoice) -->\r\n<div class=\"row mt-4 d-none\" id=\"itemSection\">\r\n  <div class=\"col-md-6 offset-md-3\">\r\n    <input\r\n      type=\"text\"\r\n      id=\"itemBarcode\"\r\n      class=\"form-control form-control-lg\"\r\n      placeholder=\"Scan item barcode …\"\r\n      autocomplete=\"off\"\r\n      disabled\r\n    />\r\n    <div id=\"itemFeedback\" class=\"mt-2\"></div>\r\n  </div>\r\n</div>\r\n\r\n<!-- 3. Scanned-items table -->\r\n<div class=\"row mt-4 d-none\" id=\"tableSection\">\r\n  <div class=\"col-md-8 offset-md-2\">\r\n    <table class=\"table table-bordered\" id=\"scanTable\">\r\n      <thead>\r\n        <tr>\r\n          <th>Item Code</th>\r\n          <th>Item Name</th>\r\n          <th>Required&nbsp;Qty</th>\r\n          <th>Scanned&nbsp;Qty</th>\r\n          <th style=\"width:90px\">Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody></tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n\r\n<!-- 4. Compare button -->\r\n<div class=\"row mt-3 d-none\" id=\"compareSection\">\r\n  <div class=\"col-md-8 offset-md-2 text-center\">\r\n    <button id=\"btnCompare\" class=\"btn btn-primary\">\r\n      Compare with Invoice\r\n    </button>\r\n    <div id=\"compareResult\" class=\"mt-3\"></div>\r\n    <!-- 4-bis  Comparison tables -->\r\n    <div class=\"row mt-4 d-none\" id=\"comparisonSection\">\r\n      <div class=\"col-md-10 offset-md-1\">\r\n        <!--  Missing items table  -->\r\n        <div class=\"row mt-4 d-none\" id=\"missingSection\">\r\n          <div class=\"col-md-8 offset-md-2\">\r\n            <h5>Comparison result</h5>\r\n            <h6 class=\"text-danger\">Missing items</h6>\r\n            <table class=\"table table-bordered\" id=\"missingTable\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Item Code</th>\r\n                  <th>Item Name</th>\r\n                  <th>Required&nbsp;Qty</th>\r\n                  <th>Scanned&nbsp;Qty</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody></tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <button id=\"btnClearScanned\" class=\"btn btn-secondary btn-sm\">\r\n      Clear scanned list\r\n    </button>\r\n  </div>\r\n</div>\r\n<!--</div>-->\r\n\r\n<!-- 5. Pack button -->\r\n<div class=\"row mt-3 d-none\" id=\"packSection\">\r\n  <div class=\"col-md-8 offset-md-2 text-center\">\r\n    <button id=\"btnPack\" class=\"btn btn-success\">Pack</button>\r\n  </div>\r\n</div>\r\n",
  "modified": "2025-09-12 15:58:58.421586",
  "name": "Controller Scanning Screen",
  "private": 0,
  "roles": [],
  "script": "let keyGuard; // will hold the listener reference\r\nlet scannedRowNameMap = new Map();\r\n// --- elements ----\r\n\r\nlet invoiceDoc = null;\r\nlet scannedMap = new Map(); // {item_code: qty}\r\nconst rows = [];\r\nconst invBox = root_element.getElementById(\"invoiceBarcode\");\r\nconst invFb = root_element.getElementById(\"invoiceFeedback\");\r\nconst itemBox = root_element.getElementById(\"itemBarcode\");\r\nconst itemFb = root_element.getElementById(\"itemFeedback\");\r\nconst tbody = root_element.querySelector(\"#scanTable tbody\");\r\nconst missingSection = root_element.getElementById(\"#missingTable tbody\");\r\nconst compareResult = root_element.getElementById(\"compareResult\");\r\nconst packSection = root_element.getElementById(\"packSection\");\r\nconst packBtn = root_element.getElementById(\"btnPack\");\r\nconst controllingBox = root_element.getElementById(\"controlling-container\");\r\nconst btnClearScanned = root_element.getElementById(\"btnClearScanned\");\r\n\r\n(function () {\r\n  // prevent global search shortcuts\r\n  [invBox, itemBox].forEach((box) =>\r\n    box.addEventListener(\"keydown\", (e) => {\r\n      e.stopPropagation();\r\n      if (e.key === \"/\" || (e.ctrlKey && e.key.toLowerCase() === \"k\")) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    })\r\n  );\r\n\r\n  // ---------- 1. invoice scan ----------\r\n  invBox.addEventListener(\"keydown\", (event) => {\r\n    if (event.key !== \"Enter\") return;\r\n\r\n    event.preventDefault();\r\n    invFb.innerHTML = \"\";\r\n    fetchInvoice(invBox.value.trim());\r\n  });\r\n\r\n  function fetchInvoice(invoice) {\r\n    if (!invoice) return;\r\n    frappe.call({\r\n      method: \"medis.api.controller_utils.start_invoice_controlling\",\r\n      args: { invoice },\r\n      callback: (r) => {\r\n        if (r.message.success) {\r\n          controllingBox.hidden = true;\r\n          invoiceDoc = r.message.doc;\r\n          renderInvoice(r.message.doc);\r\n          enableItemSection();\r\n          toggleClearButton();\r\n        } else {\r\n          invFb.innerHTML = `<span class=\"${\r\n            r.message.success ? \"text-success\" : \"text-danger\"\r\n          }\">${r.message.msg}</span>`;\r\n          frappe.utils.play_sound(\"error\");\r\n        }\r\n        invBox.value = \"\";\r\n      },\r\n    });\r\n  }\r\n\r\n  function renderInvoice(doc) {\r\n    root_element.getElementById(\"invName\").textContent = doc.name;\r\n    root_element.getElementById(\"invCustomer\").textContent = doc.customer;\r\n    root_element.getElementById(\"invStatus\").textContent = doc.workflow_state;\r\n    root_element.getElementById(\"invoiceCard\").classList.remove(\"d-none\");\r\n    invBox.hidden = true;\r\n  }\r\n\r\n  function enableItemSection() {\r\n    root_element.getElementById(\"itemSection\").classList.remove(\"d-none\");\r\n    root_element.getElementById(\"tableSection\").classList.remove(\"d-none\");\r\n    root_element.getElementById(\"compareSection\").classList.remove(\"d-none\");\r\n    itemBox.disabled = false;\r\n    itemBox.focus();\r\n    blockGlobalKeys();\r\n    tbody.addEventListener(\"keydown\", (e) => {\r\n      if (\r\n        e.target.classList.contains(\"qty-input\") &&\r\n        (e.key === \"Enter\" || e.key === \"Tab\")\r\n      ) {\r\n        e.preventDefault();\r\n        itemBox.focus();\r\n      }\r\n    });\r\n\r\n    tbody.addEventListener(\"change\", (e) => {\r\n      if (e.target.classList.contains(\"qty-input\")) {\r\n        itemBox.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  root_element.addEventListener(\"click\", (e) => {\r\n    if (!e.target.classList.contains(\"btn-remove\")) return;\r\n    const code = e.target.dataset.code;\r\n    scannedMap.delete(code);\r\n    e.target.closest(\"tr\").remove();\r\n    toggleClearButton();\r\n  });\r\n\r\n  // Clear entire scanned list\r\n  root_element\r\n    .getElementById(\"btnClearScanned\")\r\n    .addEventListener(\"click\", () => {\r\n      const d = new frappe.ui.Dialog({\r\n        title: \"Clear Scanned List\",\r\n        fields: [\r\n          {\r\n            label: \"Are you sure you want to clear scanned list?\",\r\n            fieldtype: \"HTML\",\r\n            options:\r\n              \"<p>This will clear the invoice and all scanned items.</p>\",\r\n          },\r\n        ],\r\n        primary_action_label: \"Yes, Clear\",\r\n        primary_action: () => {\r\n          // Clear all scanned data\r\n          scannedMap.clear();\r\n          scannedRowNameMap.clear();\r\n          rows.length = 0; // Clear the rows array\r\n\r\n          // Clear UI elements\r\n          tbody.innerHTML = \"\";\r\n          itemFb.innerHTML = \"\";\r\n\r\n          // Clear missing table and comparison results\r\n          const mTbody = root_element.querySelector(\"#missingTable tbody\");\r\n          if (mTbody) mTbody.innerHTML = \"\";\r\n          compareResult.innerHTML = \"\";\r\n\r\n          // Hide comparison sections\r\n          root_element\r\n            .getElementById(\"comparisonSection\")\r\n            .classList.add(\"d-none\");\r\n          root_element.getElementById(\"missingSection\").classList.add(\"d-none\");\r\n          togglePackButton(false);\r\n          toggleClearButton();\r\n          88;\r\n          itemBox.focus();\r\n          d.hide();\r\n        },\r\n\r\n        secondary_action_label: \"No\",\r\n        secondary_action: () => d.hide(),\r\n      });\r\n      d.show();\r\n    });\r\n\r\n  // ---------- 2. item scan ----------\r\n  itemBox.addEventListener(\"keydown\", (e) => {\r\n    if (e.key !== \"Enter\") return;\r\n    e.preventDefault();\r\n    lookupItemByBarcode(itemBox.value.trim());\r\n    itemFb.innerHTML = \"\";\r\n  });\r\n\r\n  function lookupItemByBarcode(barcode) {\r\n    if (!barcode) return;\r\n    frappe.call({\r\n      method: \"medis.api.controller_utils.get_item_by_barcode\",\r\n      args: { barcode },\r\n      callback: (r) => {\r\n        if (r.message.success) {\r\n          addOrUpdateRow(r.message.item_code, r.message.item_name);\r\n        } else {\r\n          itemFb.innerHTML = `<span class=\"text-danger\">${r.message.msg}</span>`;\r\n          frappe.utils.play_sound(\"error\");\r\n        }\r\n        itemBox.value = \"\";\r\n      },\r\n    });\r\n  }\r\n\r\n  function addOrUpdateRow(code, name) {\r\n    // Check for undefined values\r\n    if (!code || !name) {\r\n      return;\r\n    }\r\n\r\n    scannedRowNameMap.set(code, name);\r\n    const currentQty = scannedMap.get(code) || 0;\r\n    const newQty = currentQty + 1;\r\n    scannedMap.set(code, newQty);\r\n\r\n    let row = tbody.querySelector(`tr[data-code=\"${code}\"]`);\r\n\r\n    if (row) {\r\n      row.querySelector(\".qty-input\").value = newQty;\r\n    } else {\r\n      row = document.createElement(\"tr\");\r\n      row.dataset.code = code;\r\n      row.innerHTML = `\r\n        <td>${code}</td>\r\n        <td>${name}</td>\r\n        <td> </td>\r\n        <td>\r\n          <input type=\"number\" min=\"1\" value=\"${newQty}\" class=\"form-control qty-input\"\r\n                style=\"width:80px;\" autofocus>\r\n        </td>\r\n        <td>\r\n        <button class=\"btn btn-sm btn-outline-secondary btn-remove\"\r\n                data-code=\"${code}\" title=\"Remove\">\r\n          Clear\r\n        </button>\r\n      </td>`;\r\n      tbody.appendChild(row);\r\n      toggleClearButton();\r\n    }\r\n\r\n    row.querySelector(\".qty-input\").focus();\r\n    row.querySelector(\".qty-input\").addEventListener(\"change\", (e) => {\r\n      const newQty = parseInt(e.target.value || 0);\r\n      scannedMap.set(code, newQty);\r\n    });\r\n  }\r\n\r\n  // ---------- 3. delete invoice ----------\r\n  root_element\r\n    .getElementById(\"btnCancelControl\")\r\n    .addEventListener(\"click\", () => {\r\n      const d = new frappe.ui.Dialog({\r\n        title: \"Cancel Control\",\r\n        fields: [\r\n          {\r\n            label: \"Are you sure you want to cancel the current control?\",\r\n            fieldtype: \"HTML\",\r\n            options:\r\n              \"<p>This will clear the invoice and all scanned items.</p>\",\r\n          },\r\n        ],\r\n        primary_action_label: \"Yes, Cancel\",\r\n        primary_action: () => {\r\n          // ---- existing reset code ----\r\n          frappe.call({\r\n            method: \"medis.api.controller_utils.cancel_control\",\r\n            args: {\r\n              invoice: invoiceDoc.name,\r\n            },\r\n            callback: (r) => {\r\n              if (r.message.success) {\r\n                // Clear all state variables\r\n                invoiceDoc = null;\r\n                scannedMap.clear();\r\n                scannedRowNameMap.clear();\r\n                rows.length = 0; // Clear the rows array\r\n\r\n                // Clear all UI elements\r\n                tbody.innerHTML = \"\";\r\n                compareResult.innerHTML = \"\";\r\n                invFb.innerHTML = \"\";\r\n                itemFb.innerHTML = \"\";\r\n\r\n                // Clear missing table if it exists\r\n                const mTbody = root_element.querySelector(\r\n                  \"#missingTable tbody\"\r\n                );\r\n                if (mTbody) mTbody.innerHTML = \"\";\r\n\r\n                // Hide all sections\r\n                root_element\r\n                  .getElementById(\"invoiceCard\")\r\n                  .classList.add(\"d-none\");\r\n                root_element\r\n                  .getElementById(\"itemSection\")\r\n                  .classList.add(\"d-none\");\r\n                root_element\r\n                  .getElementById(\"tableSection\")\r\n                  .classList.add(\"d-none\");\r\n                root_element\r\n                  .getElementById(\"compareSection\")\r\n                  .classList.add(\"d-none\");\r\n                root_element\r\n                  .getElementById(\"comparisonSection\")\r\n                  .classList.add(\"d-none\");\r\n                root_element\r\n                  .getElementById(\"missingSection\")\r\n                  .classList.add(\"d-none\");\r\n                togglePackButton(false);\r\n\r\n                // Reset input fields\r\n                invBox.value = \"\";\r\n                itemBox.value = \"\";\r\n                invBox.hidden = false;\r\n                itemBox.disabled = true;\r\n                controllingBox.hidden = false;\r\n\r\n                // Reset focus and unblock keys\r\n                invBox.focus();\r\n                unblockGlobalKeys();\r\n                toggleClearButton();\r\n\r\n                d.hide();\r\n                frappe.utils.play_sound(\"submit\");\r\n              } else {\r\n                frappe.msgprint(\r\n                  r.message.error || \"Error while Canceling Control\"\r\n                );\r\n              }\r\n            },\r\n          });\r\n        },\r\n        secondary_action_label: \"No\",\r\n        secondary_action: () => d.hide(),\r\n      });\r\n      d.show();\r\n    });\r\n\r\n  function clearPage() {\r\n    // Clear all state variables\r\n    invoiceDoc = null;\r\n    scannedMap.clear();\r\n    scannedRowNameMap.clear();\r\n    rows.length = 0; // Clear the rows array\r\n\r\n    // Clear all UI elements\r\n    tbody.innerHTML = \"\";\r\n    compareResult.innerHTML = \"\";\r\n    invFb.innerHTML = \"\";\r\n    itemFb.innerHTML = \"\";\r\n\r\n    // Clear missing table if it exists\r\n    const mTbody = root_element.querySelector(\"#missingTable tbody\");\r\n    if (mTbody) mTbody.innerHTML = \"\";\r\n\r\n    // Hide all sections\r\n    root_element.getElementById(\"invoiceCard\").classList.add(\"d-none\");\r\n    root_element.getElementById(\"itemSection\").classList.add(\"d-none\");\r\n    root_element.getElementById(\"tableSection\").classList.add(\"d-none\");\r\n    root_element.getElementById(\"compareSection\").classList.add(\"d-none\");\r\n    root_element.getElementById(\"comparisonSection\").classList.add(\"d-none\");\r\n    root_element.getElementById(\"missingSection\").classList.add(\"d-none\");\r\n    togglePackButton(false);\r\n\r\n    // Reset input fields\r\n    invBox.value = \"\";\r\n    itemBox.value = \"\";\r\n    invBox.hidden = false;\r\n    itemBox.disabled = true;\r\n    controllingBox.hidden = false;\r\n\r\n    // Reset focus and unblock keys\r\n    invBox.focus();\r\n    unblockGlobalKeys();\r\n    toggleClearButton();\r\n  }\r\n\r\n  // ---------- 4. compare ----------\r\n  root_element\r\n    .getElementById(\"btnCompare\")\r\n    .addEventListener(\"click\", compareWithInvoice);\r\n\r\n  function compareWithInvoice() {\r\n    if (!invoiceDoc) return;\r\n    syncQtyFromTable();\r\n\r\n    // Clear the rows array before building new comparison data\r\n    rows.length = 0;\r\n\r\n    // Build required map\r\n    const requiredMap = new Map();\r\n    invoiceDoc.items.forEach((it) =>\r\n      requiredMap.set(it.item_code, { qty: it.qty, name: it.item_name })\r\n    );\r\n\r\n    // ------------------------------------------------------------------\r\n    // 1) Missing items table\r\n    // ------------------------------------------------------------------\r\n    const mSection = root_element.getElementById(\"missingSection\");\r\n    const mTbody = root_element.querySelector(\"#missingTable tbody\");\r\n\r\n    mTbody.innerHTML = \"\";\r\n    requiredMap.forEach((v, code) => {\r\n      if (!scannedMap.has(code)) {\r\n        const tr = document.createElement(\"tr\");\r\n        tr.innerHTML = `\r\n        <td>${code}</td>\r\n        <td>${v.name}</td>\r\n        <td>${v.qty}</td>\r\n        <td>0</td>`;\r\n        mTbody.appendChild(tr);\r\n      }\r\n    });\r\n    mSection.classList.toggle(\"d-none\", mTbody.rows.length === 0);\r\n\r\n    // ------------------------------------------------------------------\r\n    // 2) Scanned items table  (extra -> mismatched -> ok)\r\n    // ------------------------------------------------------------------\r\n\r\n    scannedMap.forEach((scannedQty, code) => {\r\n      // Skip undefined entries\r\n      if (!code || code === \"undefined\") {\r\n        return;\r\n      }\r\n\r\n      const req = requiredMap.get(code);\r\n      const row = {\r\n        code,\r\n        name: req ? req.name : scannedRowNameMap.get(code) || \"\", // fallback if needed\r\n        required: req ? req.qty : 0,\r\n        scanned: scannedQty,\r\n        type: !req ? \"extra\" : scannedQty !== req.qty ? \"mismatch\" : \"ok\",\r\n      };\r\n      rows.push(row);\r\n    });\r\n\r\n    // sort: extra first, then mismatch, then ok\r\n    rows.sort((a, b) => {\r\n      const weight = { extra: 0, mismatch: 1, ok: 2 };\r\n      return weight[a.type] - weight[b.type];\r\n    });\r\n\r\n    const sTbody = root_element.querySelector(\"#scanTable tbody\");\r\n    sTbody.innerHTML = \"\";\r\n    rows.forEach((r) => {\r\n      const tr = document.createElement(\"tr\");\r\n      tr.classList.add(`row-${r.type}`); // colour class\r\n      tr.dataset.code = r.code; // Make sure the data-code is set\r\n      tr.innerHTML = `\r\n      <td>${r.code}</td>\r\n      <td>${r.name}</td>\r\n      <td>${r.required}</td>\r\n      <td>\r\n        <input type=\"number\" min=\"0\" value=\"${r.scanned}\"\r\n               class=\"form-control form-control-sm qty-input\" style=\"width:80px\">\r\n      </td>\r\n      <td>\r\n        <button class=\"btn btn-sm btn-outline-secondary btn-remove\"\r\n                data-code=\"${r.code}\" title=\"Remove\">Clear</button>\r\n      </td>`;\r\n      sTbody.appendChild(tr);\r\n\r\n      // Add change event listener to the input field\r\n      const inputElement = tr.querySelector(\".qty-input\");\r\n      inputElement.addEventListener(\"change\", (e) => {\r\n        const newQty = parseInt(e.target.value) || 0;\r\n        scannedMap.set(r.code, newQty);\r\n      });\r\n    });\r\n\r\n    // ------------------------------------------------------------------\r\n    // 3) Show section & toggle Pack button\r\n    // ------------------------------------------------------------------\r\n    root_element.getElementById(\"comparisonSection\").classList.remove(\"d-none\");\r\n    root_element\r\n      .getElementById(\"comparisonSection\")\r\n      .scrollIntoView({ behavior: \"smooth\" });\r\n\r\n    const missingCount = mTbody.rows.length;\r\n    const mismatchCount = sTbody.querySelectorAll(\r\n      \"tr.row-mismatch, tr.row-extra\"\r\n    ).length;\r\n    togglePackButton(missingCount === 0 && mismatchCount === 0);\r\n  }\r\n\r\n  packBtn.addEventListener(\"click\", () => {\r\n    const d = new frappe.ui.Dialog({\r\n      title: \"Confirm Packing\",\r\n      fields: [\r\n        {\r\n          label: \"Number of Packages\",\r\n          fieldname: \"packages\",\r\n          fieldtype: \"Int\",\r\n          reqd: 1,\r\n          default: 1,\r\n        },\r\n      ],\r\n      primary_action_label: \"Print & Save\",\r\n      primary_action: (values) => {\r\n                      var printService = new frappe.silent_print.WebSocketPrinter();\r\n        frappe.call({\r\n          method: \"medis.api.controller_utils.pack_invoice\",\r\n          args: {\r\n            invoice: invoiceDoc.name,\r\n            packages: values.packages,\r\n            // items: Object.fromEntries(scannedMap), // {item_code: qty}\r\n          },\r\n          callback: async (r) => {\r\n            if (r.message.success) {\r\n              frappe.show_alert({\r\n                message: \"Invoice packed successfully\",\r\n                indicator: \"green\",\r\n              });\r\n              let zpl = [];\r\n              for (let i = 1; i <= values.packages; i++) {\r\n                zpl.push(`^XA\r\n                                    ^FO50,50^A0N,40,40^FDInvoice: ${invoiceDoc.name}^FS\r\n                                    ^FO50,120^A0N,40,40^FDPackage: ${i}/${values.packages}^FS\r\n                                    ^FO50,200^BY2\r\n                                    ^BCN,100,Y,N,N\r\n                                    ^FD${invoiceDoc.name}^FS\r\n                                    ^XZ`);\r\n              }\r\n\r\n              const payload = {\r\n                type: \"THERMAL\",\r\n                raw_content: btoa(zpl),\r\n              };\r\n\r\n              printService.submit(payload);\r\n              d.hide();\r\n              // optionally reset the whole screen\r\n              frappe.utils.play_sound(\"submit\");\r\n              togglePackButton(false);\r\n              // root_element.getElementById(\"btnDeleteInvoice\").click(F);\r\n              clearPage();\r\n            } else {\r\n              frappe.msgprint(r.message.msg || \"Error while packing\");\r\n            }\r\n          },\r\n        });\r\n      },\r\n    });\r\n    d.show();\r\n  });\r\n\r\n  function togglePackButton(ok) {\r\n    if (ok) packSection.classList.remove(\"d-none\");\r\n    else packSection.classList.add(\"d-none\");\r\n  }\r\n  function syncQtyFromTable() {\r\n    // update scannedMap with whatever the user has typed\r\n    tbody.querySelectorAll(\"tr\").forEach((tr) => {\r\n      const code = tr.dataset.code;\r\n      const inputElement = tr.querySelector(\".qty-input\");\r\n\r\n      // Safety checks\r\n      if (!code || !inputElement) {\r\n        return;\r\n      }\r\n\r\n      const val = parseInt(inputElement.value) || 0;\r\n      if (val > 0) {\r\n        scannedMap.set(code, val);\r\n      } else {\r\n        // Remove items with 0 or invalid quantity\r\n        scannedMap.delete(code);\r\n      }\r\n    });\r\n  }\r\n})();\r\n\r\nfunction blockGlobalKeys() {\r\n  keyGuard = (e) => {\r\n    // numbers on the numpad and main keyboard\r\n    if (e.code.startsWith(\"Digit\") || e.code.startsWith(\"Numpad\")) {\r\n      e.stopImmediatePropagation();\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", keyGuard, true); // use-capture\r\n}\r\n\r\nfunction unblockGlobalKeys() {\r\n  if (keyGuard) {\r\n    document.removeEventListener(\"keydown\", keyGuard, true);\r\n    keyGuard = null;\r\n  }\r\n}\r\n\r\nfunction toggleClearButton() {\r\n  const hasRows = tbody.rows.length > 0;\r\n  btnClearScanned.classList.toggle(\"d-none\", !hasRows);\r\n}\r\n\r\nfrappe.provide(\"frappe.silent_print\");\r\nfrappe.silent_print.WebSocketPrinter = function (options) {\r\n  console.log(\"--------------------- WebSocketPrinter ------------------\");\r\n  var defaults = {\r\n    url: \"ws://127.0.0.1:12212/printer\",\r\n    onConnect: function () {},\r\n    onDisconnect: function () {},\r\n    onUpdate: function () {},\r\n  };\r\n\r\n  var settings = Object.assign({}, defaults, options);\r\n  var websocket;\r\n  var connected = false;\r\n\r\n  var onMessage = function (evt) {\r\n    settings.onUpdate(evt.data);\r\n  };\r\n\r\n  var onConnect = function () {\r\n    connected = true;\r\n    settings.onConnect();\r\n  };\r\n\r\n  var onDisconnect = function () {\r\n    connected = false;\r\n    settings.onDisconnect();\r\n    reconnect();\r\n  };\r\n\r\n  var onError = function () {\r\n    if (frappe.whb == undefined) {\r\n      frappe.msgprint(\r\n        \"Connection to the printer could not be established. Please verify that the  <a href='https://github.com/imTigger/webapp-hardware-bridge' target='_blank'>WebApp Hardware Bridge</a> is running.\"\r\n      );\r\n      frappe.whb = true;\r\n    }\r\n  };\r\n\r\n  var connect = function () {\r\n    websocket = new WebSocket(settings.url);\r\n    websocket.onopen = onConnect;\r\n    websocket.onclose = onDisconnect;\r\n    websocket.onmessage = onMessage;\r\n    websocket.onerror = onError;\r\n  };\r\n\r\n  var reconnect = function () {\r\n    connect();\r\n  };\r\n\r\n  this.submit = function (data) {\r\n    console.log(\r\n      \"---------------------- WebSocketPrinter: submit ------------------\"\r\n    );\r\n    if (Array.isArray(data)) {\r\n      data.forEach(function (element) {\r\n        websocket.send(JSON.stringify(element));\r\n      });\r\n    } else {\r\n      console.log(\"-----------------------\",data);\r\n      websocket.send(JSON.stringify(data));\r\n    }\r\n  };\r\n\r\n  this.isConnected = function () {\r\n    return connected;\r\n  };\r\n\r\n  connect();\r\n};\r\n",
  "style": "  .row-extra {\n    background-color: #fff3cd !important; /* Light yellow background */\n  }\n  \n  .row-mismatch {\n    background-color: #f8d7da !important; /* Light red background */\n  }\n  \n  .row-ok {\n    background-color: #d4edda !important; /* Light green background */\n  }\n  \n  /* Missing items table styling */\n  #missingTable tbody tr {\n    background-color: #f8d7da !important;\n  }"
 }
]